//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExampleLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LibraryEntities : DbContext
    {
        public LibraryEntities()
            : base("name=LibraryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Authors> Authors { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<AuthorsWithPenNames> AuthorsWithPenNames { get; set; }
        public virtual DbSet<ViewTitleAuthor> ViewTitleAuthor { get; set; }
    
        [DbFunction("LibraryEntities", "GetAllClientItems")]
        public virtual IQueryable<GetAllClientItems_Result> GetAllClientItems(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllClientItems_Result>("[LibraryEntities].[GetAllClientItems](@ClientId)", clientIdParameter);
        }
    
        [DbFunction("LibraryEntities", "GetBooksByAuthor")]
        public virtual IQueryable<GetBooksByAuthor_Result> GetBooksByAuthor(Nullable<int> authorId)
        {
            var authorIdParameter = authorId.HasValue ?
                new ObjectParameter("AuthorId", authorId) :
                new ObjectParameter("AuthorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBooksByAuthor_Result>("[LibraryEntities].[GetBooksByAuthor](@AuthorId)", authorIdParameter);
        }
    }
}
